openapi: 3.0.3
info:
  title: Omega Momiji messenger gateway
  description: |-
    A gateway that connects backend logic with various frontends.
  version: 1.0.0
servers:
  - url: http://localhost:8091
tags:
  - name: ReceiveMessage
    description: Receiving message
  - name: SendMessage
    description: Receiving message
  - name: History
    description: Receive history
paths:
  # ------------ inbox ------------
  /inbox/frontends/{frontend_name}/chats/{chat_id}/messages:
    put:
      tags:
        - ReceiveMessage
      operationId: inboxReceiveMessage
      parameters:
        - name: frontend_name
          in: path
          description: 'Frontend name'
          required: true
          schema:
            type: string
            maxLength: 100
        - name: chat_id
          in: path
          description: 'Chat ID'
          required: true
          schema:
            type: string
            maxLength: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMessageRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '400':
          description: Client did wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Server did wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'

  # ------------ outbox ------------
  /outbox/frontends/{frontend_name}/chats/{chat_id}/text-messages:
    post:
      tags:
        - SendMessage
      summary: Send a text message
      description: Send a text message to a frontend. This endpoint should be used by bot logic
      operationId: outboxSendTextMessage
      parameters:
        - name: frontend_name
          in: path
          description: 'Frontend name'
          required: true
          schema:
            type: string
            maxLength: 100
        - name: chat_id
          in: path
          description: 'Chat ID'
          required: true
          schema:
            type: string
            maxLength: 100
      requestBody:
        description: Message to send
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendTextRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'
        '400':
          description: Client did wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Server did wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /outbox/frontends/{frontend_name}/chats/{chat_id}/image-messages:
    post:
      tags:
        - SendMessage
      summary: Send an image message
      operationId: outboxSendImageMessage
      parameters:
        - name: chat_id
          in: path
          description: 'Chat ID'
          required: true
          schema:
            type: string
            maxLength: 100
        - name: frontend_name
          in: path
          description: 'Frontend name'
          required: true
          schema:
            type: string
            maxLength: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageWithMediaRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'
        '400':
          description: Client did wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Server did wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /outbox/frontends/{frontend_name}/chats/{chat_id}/sticker-messages:
    post:
      tags:
        - SendMessage
      summary: Send a sticker message
      operationId: outboxSendStickerMessage
      parameters:
        - name: chat_id
          in: path
          description: 'Chat ID'
          required: true
          schema:
            type: string
            maxLength: 100
        - name: frontend_name
          in: path
          description: 'Frontend name'
          required: true
          schema:
            type: string
            maxLength: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendStickerRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'
        '400':
          description: Client did wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Server did wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'

  # ------------ history ------------
  /history/frontends/{frontend_name}/chats/{chat_id}/messages/{message_id}:
    get:
      description: Get concrete message
      tags:
        - History
      operationId: historyGetConcreteMessage
      parameters:
        - name: frontend_name
          in: path
          description: 'Frontend name'
          required: true
          schema:
            type: string
            maxLength: 100
        - name: chat_id
          in: path
          description: 'Chat id'
          required: true
          schema:
            type: string
            maxLength: 100
        - name: message_id
          in: path
          description: 'Message id'
          required: true
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageWithFileLink'
        '400':
          description: Client did wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Server did wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
  /history/frontends/{frontend_name}/chats/{chat_id}/messages:
    get:
      description: Get message list
      tags:
        - History
      operationId: historyGetListOfMessages
      parameters:
        - name: frontend_name
          in: path
          description: 'Frontend name'
          required: true
          schema:
            type: string
            maxLength: 100
        - name: chat_id
          in: path
          description: 'Chat id'
          required: true
          schema:
            type: string
            maxLength: 100
        - name: count
          in: query
          required: true
          description: 'Total messages needed to be received'
          schema:
            type: integer
            format: int32
        - name: id
          in: query
          required: false
          description: 'Message id to start from. If not set, will receive from last message'
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMessageListResponse'
        '400':
          description: Client did wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        '500':
          description: Server did wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'

components:
  schemas:
    CommonResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: 'Short error message'
              example: 'Not found'
            detailed:
              type: string
              description: 'Detailed error message'
              example: 'Entity with id 404 not found'
            type:
              type: string
              description: 'Exception name'
              example: 'NotFoundException'
    PutMessageRequest:
      description: 'Put message request. Used for receiving message from frontend.'
      type: object
      allOf:
        - $ref: '#/components/schemas/MessageWithMediaBytes'
    GetConcreteMessageRequest:
      description: 'Get concrete message.'
      type: object
      allOf:
        - $ref: '#/components/schemas/MessageWithFileLink'
    GetMessageListResponse:
      description: 'Get message list.'
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageWithFileLink'
    MessageWithMediaBytes:
      description: 'Used in message that has media_bytes in it.'
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
      properties:
        media_bytes:
          type: string
          description: 'Base64 encoded media'
          example: 'SGVsbG8gd29ybGQhCg=='
    MessageWithFileLink:
      description: 'Used in message that has file link in it.'
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
      properties:
        file_link:
          type: string
          description: 'File link'
          example: 'pictures/1234.png'
    BaseMessage:
      description: 'Message object. Inspired by Pyrogram'
      type: object
      required:
        - id
        - chat
        - date
        - frontend
        - from_user
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
      properties:
        frontend:
          type: string
          description: 'Frontend name. Frontend should write here its name'
          example: telegram
        id:
          type: string
          description: 'Unique message identifier inside this chat and frontend.'
          example: '10'
        from_user:
          $ref: '#/components/schemas/User'
        chat:
          $ref: '#/components/schemas/Chat'
        date:
          type: string
          description: 'Date the message was sent.'
          format: datetime
        forwarded_from:
          $ref: '#/components/schemas/User'
        forwarded_date:
          type: string
          description: 'For forwarded messages, date the original message was sent.'
          format: datetime
        reply_to_message_id:
          type: string
          example: '12'
#        command:
#          type: array
#          items:
#            type: string
        media_type:
          description: 'The message is a media message. This field will contain the enumeration type of the media message.'
          type: string
          enum:
            - AUDIO
            # Probably we should ignore documents
            - DOCUMENT
            - PHOTO
            - STICKER
            - VIDEO
            - ANIMATION
            - VOICE
            - VIDEO_NOTE
        sticker:
          $ref: '#/components/schemas/Sticker'
        # TODO: how to receive reactions
        #        reactions:
        #          type: array
        #          items:
        #            $ref: '#/components/schemas/Reaction'
        service_type:
          description: >
            The message is a service message.
            This field will contain the enumeration type of the service message.
          type: string
          enum:
            - UNKNOWN
            #            - NEW_CHAT_MEMBERS
            #            - LEFT_CHAT_MEMBERS
            - NEW_CHAT_TITLE
        #            - NEW_CHAT_PHOTO
        #            - DELETE_CHAT_PHOTO
        #            - MIGRATE_TO_CHAT_ID
        #            - MIGRATE_FROM_CHAT_ID
        text:
          description: 'For text messages, the actual UTF-8 text of the message.'

    Sticker:
      type: object
      required:
        - is_animated
        - is_video
      properties:
        emoji:
          type: string
          description: 'Emoji associated with the sticker.'
        is_animated:
          type: boolean
          description: 'True, if the sticker is animated'
        is_video:
          type: boolean
          description: 'True, if the sticker is a video sticker'
        mime_type:
          type: string
    #    Reaction:
    #      type: object
    #      properties:
    #        emoji:
    #          type: string
    #          description: 'Emoji associated with the sticker.'
    #        count:
    #          type: integer
    #          description: 'Reaction count.'
    User:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: '123'
          description: Native user ID
          maxLength: 100
        username:
          type: string
          example: Simpleton
          description: Username
          maxLength: 1024
        first_name:
          type: string
          example: Simpleton
          description: >
            User's or bot's first name.
          maxLength: 1024
        last_name:
          type: string
          example: Lastnamovitch
          description: >
            User's or bot's last name.
          maxLength: 1024
    Chat:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: Frontend native chat ID
          example: '12356'
          maxLength: 100
        title:
          type: string
          description: Chat title. If private chat, then first_name + last_name or username if no names. Or native id if nothing
          example: Omega Momiji Dev Chat
          maxLength: 1024
        type:
          type: string
          description: Chat type
          example: GROUP
          enum:
            - GROUP
            - PRIVATE
    CommonSendMessageRequest:
      type: object
      required:
        - frontend
        - chat_id
      properties:
        frontend:
          type: string
          description: Frontend name to which the message should be sent
          example: telegram
        chat_id:
          type: string
          description: Native for frontend chat ID
          example: '123567'
    SendTextRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Message body
          example: 'Hello world!'
        reply_to_message_id:
          type: string
          description: Native for frontend message ID to reply to
          example: '1'
    SendMessageResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonResponse'
      properties:
        message_id:
          type: string
          description: Native message ID
          example: '10'
    SendMessageWithMediaRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: string
          description: 'Base64 encoded media'
          example: 'SGVsbG8gd29ybGQhCg=='
    SendStickerRequest:
      type: object
      required:
        - sticker_id
      properties:
        sticker_id:
          type: string
          description: 'Sticker id to send'
          example: '420'
    ReactRequest:
      type: object
      required:
        - rect_emoji
      allOf:
        - $ref: '#/components/schemas/CommonSendMessageRequest'
      properties:
        rect_emoji:
          type: string
          description: 'Reaction emoji'
          example: '🫡'
